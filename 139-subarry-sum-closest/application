public class Solution {
    /*
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public int[] subarraySumClosest(int[] nums) {
        // write your code her
        if(nums == null){
            return null;
        }
        if(nums.length == 1) {
             int[] res = {0,0};
             return res;
        }
        int start = 0;
        int end = 0;
        int min = Math.abs(nums[0]);

        int[] s = sumRange(nums);
        for(int i=0; i<nums.length; i++) {
            for(int j=i; j<nums.length; j++) {
                int sum = Math.abs(s[j+1] - s[i]); // i=0, j = 2 sum(0- 2) = sumRange(3)- sumRange(0) = sum(j+1)-sum(i)
                if (sum < min) {//如果小，交换
                    start = i;
                    end = j;
                    min = sum;
                }
            }
        }
        int[] res = {start,end};
        return res;
    }

    private int[] sumRange(int[] nums){
        int[] sumRange = new int[nums.length+1];//由于sumRange前面手工加了一位0,所以整体长度要比sums多一位
        sumRange[0] = 0; //sumRangeq前面多加一位0，方便计算A0的值
        for (int i = 0; i<nums.length;i++){
            sumRange[i+1] = sumRange[i] + nums[i];
        }
        return sumRange;
    }
}
