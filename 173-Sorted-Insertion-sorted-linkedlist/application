public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: The head of linked list.
     */
    public ListNode insertionSortList(ListNode head) {
        // write your code here
        if(head == null || head.next == null) {//extreme condition
            return head;
        }
        // precondition
        ListNode dummy = new ListNode(-1);//单独创建一个新的dummy
        ListNode cur = head;
        while(cur != null) {// head循环
            ListNode can = cur;
            cur = cur.next;
            ListNode ln = dummy;//ln归位到dummy////ln一开始pointdummy 可以减少考虑extremely condition
            can.next = null;//can从原linkedlist中单独裂开
            while(true) {//dummy循环
            if(ln.next == null) {
               ln.next = can;
               break;
            }
            if(ln.next.val >= can.val) {//小的值插入大的值之前
                can.next = ln.next;
                ln.next = can;
                break;
            }
            ln = ln.next;//不符合以上条件，ln下移到下一位
        }
      }
      return dummy.next;
    }
}
